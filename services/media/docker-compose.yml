services:
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone (e.g., America/New_York)
    networks:
      - media-network
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/prowlarr:/config # Host path : Container path
    ports:
      - "9696:9696" # Host port : Container port
    restart: always
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    ports:
      - 8191:8191/tcp
    expose:
      - 8191
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    depends_on:
      - prowlarr

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone
    networks:
      - media-network
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/radarr:/config
      # - ${DATA_STORAGE}:/data # Map the parent data directory
      - ${DATA_STORAGE}/movies:/movies # Alternative: Map specifically
      - ${DATA_STORAGE}/downloads:/downloads # Alternative: Map specifically
    ports:
      - "7878:7878"
    restart: always
    depends_on:
      - prowlarr # Optional: wait for prowlarr (doesn't guarantee readiness)

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest # Use v4 if desired: :v4-develop
    container_name: sonarr
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone
    networks:
      - media-network
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/sonarr:/config
      # - ${DATA_STORAGE}:/data # Map the parent data directory
      - ${DATA_STORAGE}/tv:/tv # Alternative: Map specifically
      - ${DATA_STORAGE}/downloads:/downloads # Alternative: Map specifically
    ports:
      - "8989:8989"
    restart: always
    depends_on:
      - prowlarr # Optional

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone
    networks:
      - media-network
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/bazarr:/config
      # - ${DATA_STORAGE}/media:/media # Needs access to media folders
      - ${DATA_STORAGE}/movies:/movies # Alternative: Map specifically
      - ${DATA_STORAGE}/tv:/tv # Alternative: Map specifically
    ports:
      - "6767:6767"
    restart: always
    depends_on:
      - sonarr
      - radarr
  emby:
    image: lscr.io/linuxserver/emby:latest # Or emby/embyserver:latest
    container_name: emby
    networks:
      - media-network
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone
      # - GIDLIST=abc # Optional: Set group IDs for hardware transcoding if needed
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/emby:/config
      # - ${DATA_STORAGE}/media:/media # Give Emby access to your media library
      - ${DATA_STORAGE}/movies:/movies # Alternative: Map specifically
      - ${DATA_STORAGE}/tv:/tv # Alternative: Map specifically
      # - /opt/vc/lib:/opt/vc/lib # Example for RPi hardware acceleration (if host libs are mounted)
    ports:
      - "8096:8096" # HTTP Port
      - "8920:8920" # Optional: HTTPS Port
      # Add other ports if needed (e.g., DLNA: 1900/udp, 7359/udp)
    # devices: # Uncomment and configure if passing through hardware (e.g., GPU for transcoding)
    #   - /dev/dri:/dev/dri # Example for Intel Quick Sync Video / AMD VAAPI
    restart: always
  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    networks:
      - media-network
    environment:
      - LOG_LEVEL=debug
      - TZ=Canada/Montreal
    ports:
      - 5055:5055
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/overseerr/config:/app/config
    restart: always
  vpn: # Renamed from gluetun for easier reference in network_mode
    image: qmcgaw/gluetun:latest
    container_name: vpn
    hostname: vpn # Optional: Set hostname if needed
    cap_add:
      - NET_ADMIN
    # devices: # Needed for Wireguard kernel mode, uncomment if necessary
    #   - /dev/net/tun:/dev/net/tun
    networks:
      - media-network # Add to media-network so other containers can reach it
    ports:
      # --- Ports for containers using the VPN ---
      # Format: HOST_PORT:CONTAINER_PORT_INSIDE_VPN_CONTAINER
      # qBittorrent WebUI: Make HOST_PORT match original qbittorrent port
      - "8082:8082"
      # qBittorrent Torrenting Ports (TCP & UDP)
      - "6881:6881"
      - "6881:6881/udp"
      # Firefox Web Interface: Make HOST_PORT match original firefox port
      - "3210:3000"
      # --- Add other ports for VPN'd containers here if needed ---
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/gluetun:/gluetun # Persistent storage for Gluetun data
    environment:
      # --- VPN Settings (Pulled from .env file) ---
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      # WireGuard specific (only used if VPN_TYPE=wireguard)
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      # OpenVPN specific (only used if VPN_TYPE=openvpn)
      # - OPENVPN_USER=${OPENVPN_USER}
      # - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      # Server selection (choose some criteria from .env)
      - SERVER_COUNTRIES=${SERVER_COUNTRIES:-} # Use :- to allow empty env var
      # - SERVER_REGIONS=${SERVER_REGIONS:-}
      # - SERVER_CITIES=${SERVER_CITIES:-}
      # - SERVER_HOSTNAMES=${SERVER_HOSTNAMES:-}
      # - SERVER_NUMBER=${SERVER_NUMBER:-} # If using OpenVPN + number
      # - SERVER_PROTOCOLS=${SERVER_PROTOCOLS:-} # If using OpenVPN + protocol
      # - WIREGUARD_ENDPOINT_IP=${WIREGUARD_ENDPOINT_IP:-} # If using WireGuard + specific server
      # - WIREGUARD_ENDPOINT_PORT=${WIREGUARD_ENDPOINT_PORT:-} # If using WireGuard + specific server
      # - VPN_ENDPOINT_IP=${VPN_ENDPOINT_IP:-} # If using OpenVPN + specific server
      # - VPN_ENDPOINT_PORT=${VPN_ENDPOINT_PORT:-} # If using OpenVPN + specific server

      # --- Firewall / Kill Switch Settings ---
      - FIREWALL_VPN_INPUT_PORTS=${FIREWALL_VPN_INPUT_PORTS:-6881} # Allow qBittorrent peer connections ONLY via VPN
      - FIREWALL_INPUT_PORTS=${FIREWALL_INPUT_PORTS:-8082,3000} # Allow WebUI access from local network
      # --- Other Settings ---
      - TZ=${TZ}
      - PUID=3005 # Optional: Run gluetun as non-root (check Gluetun docs if issues arise)
      - PGID=3000 # Optional
      # - DOT_HEALTHCHECK_TARGET_ADDRESS=1.1.1.1:53 # Optional: Custom healthcheck target
    healthcheck: # Optional: Monitor VPN connection status
      test: ["CMD", "curl", "-f", "http://localhost:8888/v1/openvpn/status"] # Adjust path if using Wireguard? Check Gluetun docs. Might need custom healthcheck script.
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 1m # Give VPN time to connect initially
    restart: always
  qbittorrent: # Or transmission, deluge, etc.
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: service:vpn
    # networks:
      # - media-network
    environment:
      - PUID=3005 # Replace with your PUID
      - PGID=3000 # Replace with your PGID
      - TZ=Etc/UTC # Replace with your Timezone
      - WEBUI_PORT=8082
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/qbittorrent:/config
      - ${DATA_STORAGE}/downloads:/downloads # Crucial: Consistent download path
    # ports:
      # - "8082:8082" # WebUI Port
      # - "6881:6881" # Incoming Torrent Connection Port (TCP)
      # - "6881:6881/udp" # Incoming Torrent Connection Port (UDP)
    restart: always
    depends_on:
      - vpn
  firefox:
    image: lscr.io/linuxserver/firefox:latest
    container_name: firefox
    # hostname: firefox
    restart: always
    # networks:
      # - media-network
    network_mode: service:vpn # Use the vpn container's network stack
    security_opt:
      - seccomp:unconfined # optional
    environment:
      - PUID=3005 # optional
      - PGID=3000 # optional
      - TZ=${TZ}
    volumes:
      - ${DOCKER_VOLUME_STORAGE}/firefox/config:/config
      - /mnt/nas/MediaLarge/downloads:/config/Downloads
    # ports:
      # - 3210:3000
    # expose:
      # - 3000
    depends_on:
      - vpn
  filebrowser:
    image: hurlenko/filebrowser
    container_name: filebrowser
    restart: always    
    # user: 3005:3000 # adjust to your needs
    networks:
      - media-network
    environment:
      - FB_BASEURL=/filebrowser    
    ports:
      - 8081:8080
    expose:
      - 8081
    volumes:
      - ${DATA_STORAGE}/movies:/data/movies
      - ${DATA_STORAGE}/tv:/data/tv
      - ${DATA_STORAGE}/downloads:/data/downloads
      - ${DOCKER_VOLUME_STORAGE}/filebrowser/config:/config

networks:
  media-network:
    external: true